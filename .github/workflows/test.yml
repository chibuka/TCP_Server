name: Grader
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  TEMPLATE_OWNER: "chibuka"
  TEMPLATE_REPO: "TCP_Server"

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      level: ${{ steps.levels.outputs.current }}
      passed: ${{ steps.test_result.outputs.passed }}
    env:
      PYTHONUNBUFFERED: "1"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Determine current level
        id: levels
        run: |
          # Fetch the user's current level from the database or default to level_01
          CURRENT="1"
          echo "current=$CURRENT" >> $GITHUB_OUTPUT
          echo "Current level: $CURRENT"
      
      - name: Install dependencies and run tests
        id: test_result
        run: |
          pip install -U pip pytest
          if pytest -q tests/${{ steps.levels.outputs.current }} --tb=short; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "✅ Tests passed!"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "❌ Tests failed!"
            exit 1
          fi

  unlock_next_level:
    needs: test
    if: ${{ needs.test.outputs.passed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Determine next level
        id: levels
        run: |
          CURRENT="${{ needs.test.outputs.level }}"
          NUM=${CURRENT##*_}
          NEXT_NUM=$((10#$NUM + 1))
          NEXT=$(printf "level_%02d" $NEXT_NUM)
          echo "next_level=$NEXT" >> $GITHUB_OUTPUT
          echo "Next level: $NEXT"
      
      - name: Notify platform about next level
        run: |
          echo "Next level unlocked: ${{ steps.levels.outputs.next_level }}"

  notify:
    needs: [test, unlock_next_level]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify platform
        run: |
          # Extract repo owner and name
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          # Determine if next level was unlocked
          NEXT_UNLOCKED="false"
          if [[ "${{ needs.unlock_next_level.result }}" == "success" ]]; then
            NEXT_UNLOCKED="true"
          fi
          
          # Get challenge type from repo name (assuming format like TCP_Server, HTTP_Parser, etc.)
          CHALLENGE_TYPE="$REPO_NAME"
          
<<<<<<< HEAD
          curl -X POST "${{ vars.WEBHOOK_URL || 'https://nine5-ajdi.onrender.com/api/submission_webhook' }}" \
=======
          curl -X POST "${{ 'https://nine5-ajdi.onrender.com/api/submissions/submission_webhook' }}" \
>>>>>>> fe8b8aa (fixed WEBHOOK_URL issue)
            -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "X-GitHub-Event: ${{ github.event_name }}" \
            -d '{
              "user": "${{ github.actor }}",
              "repo_owner": "'$REPO_OWNER'",
              "repo_name": "'$REPO_NAME'", 
              "repo": "${{ github.repository }}",
              "challenge_type": "'$CHALLENGE_TYPE'",
              "level": "${{ needs.test.outputs.level }}",
              "status": "${{ needs.test.result }}",
              "tests_passed": "${{ needs.test.outputs.passed }}",
              "commit": "${{ github.sha }}",
              "commit_message": "${{ github.event.head_commit.message }}",
              "branch": "${{ github.ref_name }}",
              "event_type": "${{ github.event_name }}",
              "next_level_unlocked": "'$NEXT_UNLOCKED'",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }' || echo "Webhook notification failed, continuing..."
